# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and update the values for your environment
# Generate secure secrets for production: openssl rand -base64 32

# =============================================================================
# DATABASE
# =============================================================================
# SQLite database location
# Docker:           file:/app/data/db/sqlite.db
# Local Dev:        file:./data/db/sqlite.db (or file:./prisma/data/db/sqlite.db)
DATABASE_URL="file:./data/db/sqlite.db"

# =============================================================================
# JWT AUTHENTICATION
# =============================================================================
# Secret key for signing JWT tokens
# IMPORTANT: Generate a secure random string for production!
# Example command: openssl rand -base64 32
JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"

# =============================================================================
# MEILISEARCH CONFIGURATION
# =============================================================================
# Meilisearch server URL
# Docker:           http://meilisearch:7700 (uses Docker service name)
# Local Dev:        http://localhost:7700 (when running Meilisearch locally)
MEILISEARCH_HOST="http://localhost:7700"

# Meilisearch API key (must match MEILI_MASTER_KEY)
# IMPORTANT: Generate a secure random string for production!
# Example command: openssl rand -base64 32
MEILISEARCH_KEY="your-meilisearch-master-key-change-this"

# Meilisearch master key (for docker-compose)
# This should be the same as MEILISEARCH_KEY
MEILISEARCH_MASTER_KEY="your-meilisearch-master-key-change-this"

# =============================================================================
# FILE STORAGE
# =============================================================================
# Path where uploaded books will be stored
# Docker:           /app/data/books
# Local Dev:        ./data/books (relative to project root)
BOOKS_STORAGE_PATH="./data/books"

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
# Node environment (development | production)
NODE_ENV="development"

# Port for the application to listen on (default: 3000 for production, 5000 for dev)
PORT="3000"

# Public URL of your application
# Docker/Prod:      https://your-domain.com
# Local Dev:        http://localhost:5000
ORIGIN="http://localhost:3000"

